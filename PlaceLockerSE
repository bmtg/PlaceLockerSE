


javascript: (function () {
	// V0.4SE
	
	function toTitleCase(str) {
        return str.replace(/\w\S*/g, function(txt) {
        	return txt == txt.toUpperCase() ? txt : txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
    }
 
    function normalizePhone(s) {
        if (!s) {
            return s;
        }
        var s1 = s.replace(/\D/g,'');
        var m = s1.match(/^1?(\d{3})(\d{3})(\d{4})$/);
        if (!m) {
            return s;
        }
        else {
            return  m[1] + "-" + m[2] + "-" + m[3];
        }
    }
    
	var count = 0;
    var thisUser = W.loginManager.user;
    if (thisUser === null)
    	return;
    var usrRank = thisUser.normalizedLevel;
    var UpdateObject;
    var lockLevel3 = 2;
	var lockLevel4 = 3;
    var lockLevel5 = 4;

    if (lockLevel3 > (usrRank - 1)) { lockLevel3 = (usrRank - 1); }
 	if (lockLevel4 > (usrRank - 1)) { lockLevel4 = (usrRank - 1); }
    if (lockLevel5 > (usrRank - 1)) { lockLevel5 = (usrRank - 1); }
        
    if (typeof (require) !== "undefined") { UpdateObject = require("Waze/Action/UpdateObject"); }
    else { UpdateObject = W.Action.UpdateObject; }

    jQuery("#map-search input[name=q]").focus();

    for (var ix = 0; ix < W.selectionManager.selectedItems.length; ix++) {
        var item = W.selectionManager.selectedItems[ix].model;
        var categories   = item.attributes.categories;
        var addr = item.getAddressDetails();
        var validItem = (item.type === "venue" && item.attributes.name && addr.streetName && addr.streetName !== "No street" && addr.houseNumber);
        
        if (item.type == "venue") {
        
        var newName = toTitleCase(item.attributes.name);
        	var newPhone = normalizePhone(item.attributes.phone);
        	W.model.actionManager.add(new UpdateObject(item, { name: newName, phone: newPhone }));

        	
                
                
        	if (!item.attributes.name) {
        		alert("Place does not have a name.");
        	    return;
        	}
        	if (!addr.streetName || addr.streetName === "No street") {
        		alert("Place does not have a street.");
        	    return;
        	}
        	if (!addr.houseNumber) {
        	    alert("Place does not have a house number.");
        		return;
        	}
        	
    		var levelToLock = lockLevel3;
        	
        	if (categories.indexOf("COLLEGE_UNIVERSITY") > -1 && categories.indexOf("PARKING_LOT") > -1) {
        	    levelToLock = lockLevel4;
        	}
 			else if (item.isPoint() && categories.indexOf("COLLEGE_UNIVERSITY") > -1 && 
 			!(categories.indexOf("HOSPITAL_MEDICAL_CARE") > -1)) {
        	    levelToLock = lockLevel4;
        	}
 			else if (categories.indexOf("HOSPITAL_MEDICAL_CARE") > -1 || categories.indexOf("COLLEGE_UNIVERSITY") > -1 ||
        	        categories.indexOf("STADIUM_ARENA") > -1 || categories.indexOf("SCHOOL") > -1 ||
        	        categories.indexOf("AIRPORT") > -1 ) {
        	    levelToLock = lockLevel5;
        	}
 		
        	 
        	if (item.attributes.lockRank < levelToLock) {
        	    W.model.actionManager.add(new UpdateObject(item, { lockRank: levelToLock }));
        	}
    	
    	}
    	
    }
    

})();


